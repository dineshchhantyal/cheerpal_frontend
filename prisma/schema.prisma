// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id                     String      @id @default(cuid())
  name                   String?
  email                  String      @unique
  password               String?
  emailVerified          DateTime?
  image                  String?
  dateOfBirth            DateTime?
  timezone               String?     @default("UTC")
  accounts               Account[]
  sessions               Session[]
  events                 Event[]
  reminders              Reminder[]
  tags                   Tag[]       @relation
  roles                  UserRoles[]


  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRoles {
  id          String   @id @default(cuid())
  userId      String
  roleId      String
  role        Role    @relation(fields: [roleId], references: [id])
  description String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  users       UserRoles[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Event {
  id                      String         @id @default(cuid())
  userId                  String
  name                    String
  type                    String         @default("other") // 'birthday', 'anniversary', 'other', etc.
  tags                    Tag[]          @relation
  active                  Boolean        @default(true)
  description             String?
  location                String?
  date                    DateTime
  scheduleAt              DateTime?
  timezone                String?        @default("UTC")
  reminderCount           Int            @default(1)
  reminderIntervalMinutes Int?           @default(0) // in minutes (0 means no reminder)

  link      String?
  files     String[]   @default([])
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipients EventRecipient[]

  reminders Reminder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, date, active])
}

model EventRecipient {
  id     String @id @default(cuid())
  eventId String
  name   String
  email  String
  phone  String?
  reminderTypes           ReminderType[] @relation

  event  Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReminderType {
  id          String  @id @default(cuid())
  type        String  @unique
  description String?
  recipients  EventRecipient[] @relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reminder_types")
}

model Tag {
  id          String  @id @default(cuid())
  name        String  @unique @db.VarChar(255)
  description String?
  color       String? @default("#000000")
  events      Event[] @relation

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReminderStatus {
  pending
  sent
  failed
}

model Reminder {
  id             String         @id @default(cuid())
  eventId        String
  userId         String
  reminderAt     DateTime
  reminderSentAt DateTime?
  reminderStatus ReminderStatus @default(pending)

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
